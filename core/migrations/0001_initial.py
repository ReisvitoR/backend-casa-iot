# Generated by Django 5.2.5 on 2025-08-29 17:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TipoDispositivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50, unique=True)),
                ('icone', models.CharField(blank=True, max_length=50, null=True)),
                ('categoria', models.CharField(choices=[('iluminacao', 'Iluminação'), ('climatizacao', 'Climatização'), ('seguranca', 'Segurança'), ('entretenimento', 'Entretenimento'), ('eletrodomestico', 'Eletrodoméstico'), ('outro', 'Outro')], max_length=50)),
            ],
            options={
                'verbose_name': 'Tipo de Dispositivo',
                'verbose_name_plural': 'Tipos de Dispositivos',
                'ordering': ['categoria', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Casa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255)),
                ('endereco', models.TextField(blank=True, null=True)),
                ('timezone', models.CharField(default='America/Sao_Paulo', max_length=50)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='casas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Casa',
                'verbose_name_plural': 'Casas',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Cena',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255)),
                ('descricao', models.TextField(blank=True, null=True)),
                ('ativa', models.BooleanField(default=False)),
                ('indisponivel_ate', models.DateTimeField(blank=True, help_text='Data/hora até quando a cena ficará indisponível', null=True)),
                ('tempo_execucao', models.FloatField(blank=True, help_text='Tempo total de execução em segundos', null=True)),
                ('favorita', models.BooleanField(default=False)),
                ('casa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cenas', to='core.casa')),
            ],
            options={
                'verbose_name': 'Cena',
                'verbose_name_plural': 'Cenas',
                'ordering': ['-favorita', 'nome'],
                'unique_together': {('casa', 'nome')},
            },
        ),
        migrations.CreateModel(
            name='Comodo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255)),
                ('background_url', models.CharField(blank=True, max_length=255, null=True)),
                ('casa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comodos', to='core.casa')),
            ],
            options={
                'verbose_name': 'Cômodo',
                'verbose_name_plural': 'Cômodos',
                'ordering': ['casa', 'nome'],
                'unique_together': {('casa', 'nome')},
            },
        ),
        migrations.CreateModel(
            name='Dispositivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255)),
                ('estado', models.BooleanField(default=False)),
                ('potencia', models.FloatField(blank=True, help_text='Potência em Watts', null=True)),
                ('marca', models.CharField(blank=True, max_length=100, null=True)),
                ('modelo', models.CharField(blank=True, max_length=100, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('mac_address', models.CharField(blank=True, max_length=17, null=True)),
                ('ativo', models.BooleanField(default=True)),
                ('ultimo_ping', models.DateTimeField(blank=True, null=True)),
                ('comodo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dispositivos', to='core.comodo')),
                ('tipo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dispositivos', to='core.tipodispositivo')),
            ],
            options={
                'verbose_name': 'Dispositivo',
                'verbose_name_plural': 'Dispositivos',
                'ordering': ['comodo', 'nome'],
                'unique_together': {('comodo', 'nome')},
            },
        ),
        migrations.CreateModel(
            name='LogDispositivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado_anterior', models.BooleanField()),
                ('estado_novo', models.BooleanField()),
                ('origem', models.CharField(choices=[('manual', 'Manual'), ('cena', 'Cena'), ('agendamento', 'Agendamento'), ('api', 'API'), ('automacao', 'Automação')], max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('cena', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.cena')),
                ('dispositivo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='core.dispositivo')),
                ('usuario', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log do Dispositivo',
                'verbose_name_plural': 'Logs dos Dispositivos',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AcaoCena',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordem', models.PositiveIntegerField()),
                ('intervalo_tempo', models.FloatField(default=0.0, help_text='Intervalo em segundos antes desta ação')),
                ('estado_desejado', models.BooleanField()),
                ('condicional', models.BooleanField(default=False, help_text='Se True, só executa se o estado atual for diferente')),
                ('cena', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acoes', to='core.cena')),
                ('dispositivo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acoes_cena', to='core.dispositivo')),
            ],
            options={
                'verbose_name': 'Ação da Cena',
                'verbose_name_plural': 'Ações das Cenas',
                'ordering': ['cena', 'ordem'],
                'unique_together': {('cena', 'ordem')},
            },
        ),
    ]
