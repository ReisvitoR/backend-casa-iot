#!/usr/bin/env python3
"""
Script COMPLETO para testar TODAS as rotas da API Casa IoT
Inclui: GET, POST, PUT, PATCH, DELETE
"""
import urllib.request
import urllib.parse
import json
import time

BASE_URL = "https://backend-casa-iot.onrender.com/api"

def make_request(method, endpoint, data=None, expected_status=200):
    """Faz requisi√ß√£o HTTP"""
    url = f"{BASE_URL}{endpoint}"
    
    try:
        if data:
            data_bytes = json.dumps(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_bytes)
            req.add_header('Content-Type', 'application/json')
        else:
            req = urllib.request.Request(url)
        
        req.get_method = lambda: method
        
        with urllib.request.urlopen(req, timeout=30) as response:
            status = response.getcode()
            result = json.loads(response.read().decode('utf-8'))
            
            status_icon = "‚úÖ" if status == expected_status else "‚ùå"
            print(f"{status_icon} {method} {endpoint} - Status: {status}")
            
            if status != expected_status:
                print(f"   Expected: {expected_status}, Got: {status}")
            
            return status == expected_status, result
            
    except urllib.error.HTTPError as e:
        status = e.code
        status_icon = "‚úÖ" if status == expected_status else "‚ùå"
        print(f"{status_icon} {method} {endpoint} - Status: {status}")
        
        if status != expected_status:
            print(f"   Expected: {expected_status}, Got: {status}")
            
        return status == expected_status, None
        
    except Exception as e:
        print(f"‚ùå {method} {endpoint} - ERROR: {str(e)}")
        return False, None

def test_crud_complete():
    print("üß™ TESTE COMPLETO - TODOS OS M√âTODOS HTTP")
    print("=" * 60)
    
    results = []
    created_ids = {}
    
    # === 1. USU√ÅRIOS ===
    print("\nüë§ TESTANDO USU√ÅRIOS (CRUD COMPLETO):")
    
    # GET - Listar usu√°rios
    success, data = make_request("GET", "/usuarios/")
    results.append(success)
    
    # POST - Criar usu√°rio
    user_data = {
        "username": "teste_user_2025",
        "nome": "Usu√°rio Teste",
        "email": "teste@email.com",
        "telefone": "(11) 99999-9999"
    }
    success, data = make_request("POST", "/usuarios/", user_data, 201)
    results.append(success)
    if success and data:
        created_ids['usuario'] = data.get('id')
        print(f"   üìù Usu√°rio criado com ID: {created_ids['usuario']}")
    
    # GET - Usu√°rio espec√≠fico
    if 'usuario' in created_ids:
        success, data = make_request("GET", f"/usuarios/{created_ids['usuario']}/")
        results.append(success)
    
    # PUT - Atualizar usu√°rio completo
    if 'usuario' in created_ids:
        updated_user = {
            "username": "teste_user_updated",
            "nome": "Usu√°rio Atualizado",
            "email": "atualizado@email.com",
            "telefone": "(11) 88888-8888"
        }
        success, data = make_request("PUT", f"/usuarios/{created_ids['usuario']}/", updated_user)
        results.append(success)
    
    # PATCH - Atualiza√ß√£o parcial
    if 'usuario' in created_ids:
        patch_data = {"telefone": "(11) 77777-7777"}
        success, data = make_request("PATCH", f"/usuarios/{created_ids['usuario']}/", patch_data)
        results.append(success)
    
    # GET - Endpoint especial
    success, data = make_request("GET", "/usuarios/me/")
    results.append(success)
    
    # === 2. CASAS ===
    print("\nüè† TESTANDO CASAS (CRUD COMPLETO):")
    
    # GET - Listar casas
    success, data = make_request("GET", "/casas/")
    results.append(success)
    
    # POST - Criar casa
    casa_data = {
        "nome": "Casa Teste API",
        "endereco": "Rua Teste, 123",
        "cidade": "S√£o Paulo",
        "estado": "SP",
        "cep": "01234-567"
    }
    success, data = make_request("POST", "/casas/", casa_data, 201)
    results.append(success)
    if success and data:
        created_ids['casa'] = data.get('id')
        print(f"   üìù Casa criada com ID: {created_ids['casa']}")
    
    # GET - Casa espec√≠fica
    if 'casa' in created_ids:
        success, data = make_request("GET", f"/casas/{created_ids['casa']}/")
        results.append(success)
    
    # GET - Status da casa
    if 'casa' in created_ids:
        success, data = make_request("GET", f"/casas/{created_ids['casa']}/status/")
        results.append(success)
    
    # PUT - Atualizar casa
    if 'casa' in created_ids:
        updated_casa = {
            "nome": "Casa Teste Atualizada",
            "endereco": "Rua Nova, 456",
            "cidade": "Rio de Janeiro",
            "estado": "RJ",
            "cep": "20000-000"
        }
        success, data = make_request("PUT", f"/casas/{created_ids['casa']}/", updated_casa)
        results.append(success)
    
    # === 3. C√îMODOS ===
    print("\nüö™ TESTANDO C√îMODOS (CRUD COMPLETO):")
    
    # GET - Listar c√¥modos
    success, data = make_request("GET", "/comodos/")
    results.append(success)
    
    # POST - Criar c√¥modo
    if 'casa' in created_ids:
        comodo_data = {
            "nome": "Sala Teste",
            "casa": created_ids['casa'],
            "descricao": "Sala de teste da API"
        }
        success, data = make_request("POST", "/comodos/", comodo_data, 201)
        results.append(success)
        if success and data:
            created_ids['comodo'] = data.get('id')
            print(f"   üìù C√¥modo criado com ID: {created_ids['comodo']}")
    
    # GET - C√¥modo espec√≠fico
    if 'comodo' in created_ids:
        success, data = make_request("GET", f"/comodos/{created_ids['comodo']}/")
        results.append(success)
    
    # === 4. TIPOS DE DISPOSITIVO ===
    print("\nüîß TESTANDO TIPOS DE DISPOSITIVO (CRUD COMPLETO):")
    
    # GET - Listar tipos
    success, data = make_request("GET", "/tipos-dispositivo/")
    results.append(success)
    
    # POST - Criar tipo
    tipo_data = {
        "nome": "Dispositivo Teste API",
        "categoria": "teste",
        "descricao": "Dispositivo para teste da API"
    }
    success, data = make_request("POST", "/tipos-dispositivo/", tipo_data, 201)
    results.append(success)
    if success and data:
        created_ids['tipo'] = data.get('id')
        print(f"   üìù Tipo criado com ID: {created_ids['tipo']}")
    
    # === 5. DISPOSITIVOS ===
    print("\nüîå TESTANDO DISPOSITIVOS (CRUD COMPLETO + ENDPOINTS ESPECIAIS):")
    
    # GET - Listar dispositivos
    success, data = make_request("GET", "/dispositivos/")
    results.append(success)
    
    # POST - Criar dispositivo
    if 'comodo' in created_ids and 'tipo' in created_ids:
        dispositivo_data = {
            "nome": "Dispositivo Teste",
            "comodo": created_ids['comodo'],
            "tipo": created_ids['tipo'],
            "estado": False,
            "ativo": True
        }
        success, data = make_request("POST", "/dispositivos/", dispositivo_data, 201)
        results.append(success)
        if success and data:
            created_ids['dispositivo'] = data.get('id')
            print(f"   üìù Dispositivo criado com ID: {created_ids['dispositivo']}")
    
    # GET - Endpoints especiais (CORRIGIDOS)
    success, data = make_request("GET", "/dispositivos/ativos/")
    results.append(success)
    
    success, data = make_request("GET", "/dispositivos/inativos/")
    results.append(success)
    
    success, data = make_request("GET", "/dispositivos/status_geral/")
    results.append(success)
    
    # POST - Toggle dispositivo
    if 'dispositivo' in created_ids:
        success, data = make_request("POST", f"/dispositivos/{created_ids['dispositivo']}/toggle/")
        results.append(success)
    
    # === 6. CENAS ===
    print("\nüé¨ TESTANDO CENAS (CRUD COMPLETO + ENDPOINTS ESPECIAIS):")
    
    # GET - Listar cenas
    success, data = make_request("GET", "/cenas/")
    results.append(success)
    
    # POST - Criar cena
    if 'casa' in created_ids:
        cena_data = {
            "nome": "Cena Teste API",
            "casa": created_ids['casa'],
            "descricao": "Cena para teste da API",
            "ativa": True,
            "favorita": False
        }
        success, data = make_request("POST", "/cenas/", cena_data, 201)
        results.append(success)
        if success and data:
            created_ids['cena'] = data.get('id')
            print(f"   üìù Cena criada com ID: {created_ids['cena']}")
    
    # GET - Endpoints especiais (CORRIGIDOS)
    success, data = make_request("GET", "/cenas/ativas/")
    results.append(success)
    
    success, data = make_request("GET", "/cenas/favoritas/")
    results.append(success)
    
    success, data = make_request("GET", "/cenas/disponiveis/")
    results.append(success)
    
    success, data = make_request("GET", "/cenas/status_geral/")
    results.append(success)
    
    # POST - Executar cena
    if 'cena' in created_ids:
        success, data = make_request("POST", f"/cenas/{created_ids['cena']}/executar/")
        results.append(success)
    
    # === 7. A√á√ïES DE CENA ===
    print("\n‚öôÔ∏è TESTANDO A√á√ïES DE CENA (CRUD COMPLETO):")
    
    # GET - Listar a√ß√µes
    success, data = make_request("GET", "/acoes-cena/")
    results.append(success)
    
    # POST - Criar a√ß√£o
    if 'cena' in created_ids and 'dispositivo' in created_ids:
        acao_data = {
            "cena": created_ids['cena'],
            "dispositivo": created_ids['dispositivo'],
            "acao": "ligar",
            "valor": "100",
            "ordem": 1
        }
        success, data = make_request("POST", "/acoes-cena/", acao_data, 201)
        results.append(success)
        if success and data:
            created_ids['acao'] = data.get('id')
            print(f"   üìù A√ß√£o criada com ID: {created_ids['acao']}")
    
    # === 8. LOGS ===
    print("\nüìä TESTANDO LOGS (READ-ONLY):")
    
    # GET - Listar logs
    success, data = make_request("GET", "/logs/")
    results.append(success)
    
    # === LIMPEZA ===
    print("\nüßπ LIMPANDO DADOS DE TESTE:")
    
    # DELETE - Limpar dados criados (ordem inversa)
    if 'acao' in created_ids:
        success, data = make_request("DELETE", f"/acoes-cena/{created_ids['acao']}/", None, 204)
        results.append(success)
    
    if 'cena' in created_ids:
        success, data = make_request("DELETE", f"/cenas/{created_ids['cena']}/", None, 204)
        results.append(success)
    
    if 'dispositivo' in created_ids:
        success, data = make_request("DELETE", f"/dispositivos/{created_ids['dispositivo']}/", None, 204)
        results.append(success)
    
    if 'tipo' in created_ids:
        success, data = make_request("DELETE", f"/tipos-dispositivo/{created_ids['tipo']}/", None, 204)
        results.append(success)
    
    if 'comodo' in created_ids:
        success, data = make_request("DELETE", f"/comodos/{created_ids['comodo']}/", None, 204)
        results.append(success)
    
    if 'casa' in created_ids:
        success, data = make_request("DELETE", f"/casas/{created_ids['casa']}/", None, 204)
        results.append(success)
    
    if 'usuario' in created_ids:
        success, data = make_request("DELETE", f"/usuarios/{created_ids['usuario']}/", None, 204)
        results.append(success)
    
    # === RESUMO FINAL ===
    print("\n" + "=" * 60)
    print("üìä RESUMO FINAL DOS TESTES:")
    
    successful = sum(1 for result in results if result)
    total = len(results)
    
    print(f"‚úÖ Sucessos: {successful}/{total}")
    print(f"‚ùå Falhas: {total - successful}/{total}")
    print(f"üìà Taxa de sucesso: {(successful/total)*100:.1f}%")
    
    print(f"\nüìã M√âTODOS TESTADOS:")
    print(f"  ‚Ä¢ GET (leitura)")
    print(f"  ‚Ä¢ POST (cria√ß√£o)")
    print(f"  ‚Ä¢ PUT (atualiza√ß√£o completa)")
    print(f"  ‚Ä¢ PATCH (atualiza√ß√£o parcial)")
    print(f"  ‚Ä¢ DELETE (remo√ß√£o)")
    print(f"  ‚Ä¢ Actions customizadas (toggle, status, etc.)")
    
    if successful == total:
        print("\nüéâ TODOS OS ENDPOINTS E M√âTODOS FUNCIONANDO PERFEITAMENTE!")
        print("üöÄ API 100% OPERACIONAL!")
    else:
        print(f"\n‚ö†Ô∏è {total - successful} ENDPOINT(S) COM PROBLEMA")
        print("üîß Verificar logs acima para detalhes")

if __name__ == "__main__":
    test_crud_complete()
